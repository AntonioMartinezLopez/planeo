// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	models "planeo/api/internal/resources/user/models"

	mock "github.com/stretchr/testify/mock"
)

// MockUserRepositoryInterface is an autogenerated mock type for the UserRepositoryInterface type
type MockUserRepositoryInterface struct {
	mock.Mock
}

type MockUserRepositoryInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepositoryInterface) EXPECT() *MockUserRepositoryInterface_Expecter {
	return &MockUserRepositoryInterface_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: ctx, organizationId, _a2
func (_m *MockUserRepositoryInterface) CreateUser(ctx context.Context, organizationId string, _a2 models.User) error {
	ret := _m.Called(ctx, organizationId, _a2)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.User) error); ok {
		r0 = rf(ctx, organizationId, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepositoryInterface_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepositoryInterface_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId string
//   - _a2 models.User
func (_e *MockUserRepositoryInterface_Expecter) CreateUser(ctx interface{}, organizationId interface{}, _a2 interface{}) *MockUserRepositoryInterface_CreateUser_Call {
	return &MockUserRepositoryInterface_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, organizationId, _a2)}
}

func (_c *MockUserRepositoryInterface_CreateUser_Call) Run(run func(ctx context.Context, organizationId string, _a2 models.User)) *MockUserRepositoryInterface_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(models.User))
	})
	return _c
}

func (_c *MockUserRepositoryInterface_CreateUser_Call) Return(_a0 error) *MockUserRepositoryInterface_CreateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepositoryInterface_CreateUser_Call) RunAndReturn(run func(context.Context, string, models.User) error) *MockUserRepositoryInterface_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, organizationId, userId
func (_m *MockUserRepositoryInterface) DeleteUser(ctx context.Context, organizationId string, userId string) error {
	ret := _m.Called(ctx, organizationId, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, organizationId, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepositoryInterface_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserRepositoryInterface_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId string
//   - userId string
func (_e *MockUserRepositoryInterface_Expecter) DeleteUser(ctx interface{}, organizationId interface{}, userId interface{}) *MockUserRepositoryInterface_DeleteUser_Call {
	return &MockUserRepositoryInterface_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, organizationId, userId)}
}

func (_c *MockUserRepositoryInterface_DeleteUser_Call) Run(run func(ctx context.Context, organizationId string, userId string)) *MockUserRepositoryInterface_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserRepositoryInterface_DeleteUser_Call) Return(_a0 error) *MockUserRepositoryInterface_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepositoryInterface_DeleteUser_Call) RunAndReturn(run func(context.Context, string, string) error) *MockUserRepositoryInterface_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersInformation provides a mock function with given fields: ctx, organizationId
func (_m *MockUserRepositoryInterface) GetUsersInformation(ctx context.Context, organizationId string) ([]models.BasicUserInformation, error) {
	ret := _m.Called(ctx, organizationId)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersInformation")
	}

	var r0 []models.BasicUserInformation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.BasicUserInformation, error)); ok {
		return rf(ctx, organizationId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.BasicUserInformation); ok {
		r0 = rf(ctx, organizationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.BasicUserInformation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organizationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepositoryInterface_GetUsersInformation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersInformation'
type MockUserRepositoryInterface_GetUsersInformation_Call struct {
	*mock.Call
}

// GetUsersInformation is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId string
func (_e *MockUserRepositoryInterface_Expecter) GetUsersInformation(ctx interface{}, organizationId interface{}) *MockUserRepositoryInterface_GetUsersInformation_Call {
	return &MockUserRepositoryInterface_GetUsersInformation_Call{Call: _e.mock.On("GetUsersInformation", ctx, organizationId)}
}

func (_c *MockUserRepositoryInterface_GetUsersInformation_Call) Run(run func(ctx context.Context, organizationId string)) *MockUserRepositoryInterface_GetUsersInformation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepositoryInterface_GetUsersInformation_Call) Return(_a0 []models.BasicUserInformation, _a1 error) *MockUserRepositoryInterface_GetUsersInformation_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepositoryInterface_GetUsersInformation_Call) RunAndReturn(run func(context.Context, string) ([]models.BasicUserInformation, error)) *MockUserRepositoryInterface_GetUsersInformation_Call {
	_c.Call.Return(run)
	return _c
}

// SyncUsers provides a mock function with given fields: ctx, organizationId, users
func (_m *MockUserRepositoryInterface) SyncUsers(ctx context.Context, organizationId string, users []models.User) error {
	ret := _m.Called(ctx, organizationId, users)

	if len(ret) == 0 {
		panic("no return value specified for SyncUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []models.User) error); ok {
		r0 = rf(ctx, organizationId, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepositoryInterface_SyncUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SyncUsers'
type MockUserRepositoryInterface_SyncUsers_Call struct {
	*mock.Call
}

// SyncUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId string
//   - users []models.User
func (_e *MockUserRepositoryInterface_Expecter) SyncUsers(ctx interface{}, organizationId interface{}, users interface{}) *MockUserRepositoryInterface_SyncUsers_Call {
	return &MockUserRepositoryInterface_SyncUsers_Call{Call: _e.mock.On("SyncUsers", ctx, organizationId, users)}
}

func (_c *MockUserRepositoryInterface_SyncUsers_Call) Run(run func(ctx context.Context, organizationId string, users []models.User)) *MockUserRepositoryInterface_SyncUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]models.User))
	})
	return _c
}

func (_c *MockUserRepositoryInterface_SyncUsers_Call) Return(_a0 error) *MockUserRepositoryInterface_SyncUsers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepositoryInterface_SyncUsers_Call) RunAndReturn(run func(context.Context, string, []models.User) error) *MockUserRepositoryInterface_SyncUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, organizationId, userId, _a3
func (_m *MockUserRepositoryInterface) UpdateUser(ctx context.Context, organizationId string, userId string, _a3 models.User) error {
	ret := _m.Called(ctx, organizationId, userId, _a3)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, models.User) error); ok {
		r0 = rf(ctx, organizationId, userId, _a3)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepositoryInterface_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserRepositoryInterface_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationId string
//   - userId string
//   - _a3 models.User
func (_e *MockUserRepositoryInterface_Expecter) UpdateUser(ctx interface{}, organizationId interface{}, userId interface{}, _a3 interface{}) *MockUserRepositoryInterface_UpdateUser_Call {
	return &MockUserRepositoryInterface_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, organizationId, userId, _a3)}
}

func (_c *MockUserRepositoryInterface_UpdateUser_Call) Run(run func(ctx context.Context, organizationId string, userId string, _a3 models.User)) *MockUserRepositoryInterface_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(models.User))
	})
	return _c
}

func (_c *MockUserRepositoryInterface_UpdateUser_Call) Return(_a0 error) *MockUserRepositoryInterface_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepositoryInterface_UpdateUser_Call) RunAndReturn(run func(context.Context, string, string, models.User) error) *MockUserRepositoryInterface_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepositoryInterface creates a new instance of MockUserRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepositoryInterface {
	mock := &MockUserRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
