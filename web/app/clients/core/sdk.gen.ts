// This file is auto-generated by @hey-api/openapi-ts

import type { Client, Options as ClientOptions, Composable, TDataShape } from "@hey-api/client-nuxt";
import type { AssignUserRolesData, AssignUserRolesError, AssignUserRolesResponse, CreateCategoryData, CreateCategoryError, CreateCategoryResponse, CreateRequestData, CreateRequestError, CreateRequestResponse, CreateUserData, CreateUserError, DeleteCategoryData, DeleteCategoryError, DeleteCategoryResponse, DeleteRequestData, DeleteRequestError, DeleteRequestResponse, DeleteUserData, DeleteUserError, DeleteUserResponse, GetBasicUserInformationData, GetBasicUserInformationError, GetBasicUserInformationResponse, GetCategoriesData, GetCategoriesError, GetCategoriesResponse, GetRequestsData, GetRequestsError, GetRequestsResponse, GetRolesData, GetRolesError, GetRolesResponse, GetUserData, GetUserError, GetUserResponse, GetUsersData, GetUsersError, GetUsersResponse, ServerStatusData, ServerStatusError, ServerStatusResponse, UpdateCategoryData, UpdateCategoryError, UpdateCategoryResponse, UpdateRequestData, UpdateRequestError, UpdateRequestResponse, UpdateUserData, UpdateUserError, UpdateUserResponse } from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<TComposable extends Composable, TData extends TDataShape = TDataShape, ResT = unknown, DefaultT = undefined> = ClientOptions<TComposable, TData, ResT, DefaultT> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get Categories
 */
export function getCategories<TComposable extends Composable, DefaultT extends GetCategoriesResponse = GetCategoriesResponse>(options: Options<TComposable, GetCategoriesData, GetCategoriesResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).get<TComposable, GetCategoriesResponse | DefaultT, GetCategoriesError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/categories",
    ...options,
  });
}

/**
 * Create Category
 */
export function createCategory<TComposable extends Composable, DefaultT extends CreateCategoryResponse = CreateCategoryResponse>(options: Options<TComposable, CreateCategoryData, CreateCategoryResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).post<TComposable, CreateCategoryResponse | DefaultT, CreateCategoryError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/categories",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
}

/**
 * Delete Category
 */
export function deleteCategory<TComposable extends Composable, DefaultT extends DeleteCategoryResponse = DeleteCategoryResponse>(options: Options<TComposable, DeleteCategoryData, DeleteCategoryResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).delete<TComposable, DeleteCategoryResponse | DefaultT, DeleteCategoryError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/categories/{categoryId}",
    ...options,
  });
}

/**
 * Update Category
 */
export function updateCategory<TComposable extends Composable, DefaultT extends UpdateCategoryResponse = UpdateCategoryResponse>(options: Options<TComposable, UpdateCategoryData, UpdateCategoryResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).put<TComposable, UpdateCategoryResponse | DefaultT, UpdateCategoryError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/categories/{categoryId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
}

/**
 * [Admin] Get roles
 */
export function getRoles<TComposable extends Composable, DefaultT extends GetRolesResponse = GetRolesResponse>(options: Options<TComposable, GetRolesData, GetRolesResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).get<TComposable, GetRolesResponse | DefaultT, GetRolesError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/iam/roles",
    ...options,
  });
}

/**
 * [Admin] Get all users from organization
 */
export function getUsers<TComposable extends Composable, DefaultT extends GetUsersResponse = GetUsersResponse>(options: Options<TComposable, GetUsersData, GetUsersResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).get<TComposable, GetUsersResponse | DefaultT, GetUsersError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/iam/users",
    ...options,
  });
}

/**
 * [Admin] Create user
 */
export function createUser<TComposable extends Composable, DefaultT = undefined>(options: Options<TComposable, CreateUserData, unknown, DefaultT>) {
  return (options.client ?? _heyApiClient).post<TComposable, unknown | DefaultT, CreateUserError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/iam/users",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
}

/**
 * [Admin] Delete user
 */
export function deleteUser<TComposable extends Composable, DefaultT extends DeleteUserResponse = DeleteUserResponse>(options: Options<TComposable, DeleteUserData, DeleteUserResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).delete<TComposable, DeleteUserResponse | DefaultT, DeleteUserError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/iam/users/{iamUserId}",
    ...options,
  });
}

/**
 * [Admin] Get single user
 */
export function getUser<TComposable extends Composable, DefaultT extends GetUserResponse = GetUserResponse>(options: Options<TComposable, GetUserData, GetUserResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).get<TComposable, GetUserResponse | DefaultT, GetUserError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/iam/users/{iamUserId}",
    ...options,
  });
}

/**
 * [Admin] Update user
 */
export function updateUser<TComposable extends Composable, DefaultT extends UpdateUserResponse = UpdateUserResponse>(options: Options<TComposable, UpdateUserData, UpdateUserResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).put<TComposable, UpdateUserResponse | DefaultT, UpdateUserError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/iam/users/{iamUserId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
}

/**
 * [Admin] Assign roles to a user
 */
export function assignUserRoles<TComposable extends Composable, DefaultT extends AssignUserRolesResponse = AssignUserRolesResponse>(options: Options<TComposable, AssignUserRolesData, AssignUserRolesResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).put<TComposable, AssignUserRolesResponse | DefaultT, AssignUserRolesError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/iam/users/{iamUserId}/roles",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
}

/**
 * Get Requests
 */
export function getRequests<TComposable extends Composable, DefaultT extends GetRequestsResponse = GetRequestsResponse>(options: Options<TComposable, GetRequestsData, GetRequestsResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).get<TComposable, GetRequestsResponse | DefaultT, GetRequestsError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/requests",
    ...options,
  });
}

/**
 * Create Request
 */
export function createRequest<TComposable extends Composable, DefaultT extends CreateRequestResponse = CreateRequestResponse>(options: Options<TComposable, CreateRequestData, CreateRequestResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).post<TComposable, CreateRequestResponse | DefaultT, CreateRequestError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/requests",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
}

/**
 * Delete Request
 */
export function deleteRequest<TComposable extends Composable, DefaultT extends DeleteRequestResponse = DeleteRequestResponse>(options: Options<TComposable, DeleteRequestData, DeleteRequestResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).delete<TComposable, DeleteRequestResponse | DefaultT, DeleteRequestError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/requests/{requestId}",
    ...options,
  });
}

/**
 * Update Request
 */
export function updateRequest<TComposable extends Composable, DefaultT extends UpdateRequestResponse = UpdateRequestResponse>(options: Options<TComposable, UpdateRequestData, UpdateRequestResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).put<TComposable, UpdateRequestResponse | DefaultT, UpdateRequestError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/requests/{requestId}",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
}

/**
 * Get basic information of users
 */
export function getBasicUserInformation<TComposable extends Composable, DefaultT extends GetBasicUserInformationResponse = GetBasicUserInformationResponse>(options: Options<TComposable, GetBasicUserInformationData, GetBasicUserInformationResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).get<TComposable, GetBasicUserInformationResponse | DefaultT, GetBasicUserInformationError, DefaultT>({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/organizations/{organizationId}/users",
    ...options,
  });
}

/**
 * Get the server status
 */
export function serverStatus<TComposable extends Composable, DefaultT extends ServerStatusResponse = ServerStatusResponse>(options: Options<TComposable, ServerStatusData, ServerStatusResponse, DefaultT>) {
  return (options.client ?? _heyApiClient).get<TComposable, ServerStatusResponse | DefaultT, ServerStatusError, DefaultT>({
    url: "/status",
    ...options,
  });
}
