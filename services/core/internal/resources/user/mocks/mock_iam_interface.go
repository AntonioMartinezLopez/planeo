// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"
	models "planeo/services/core/internal/resources/user/models"

	mock "github.com/stretchr/testify/mock"
)

// MockIAMInterface is an autogenerated mock type for the IAMInterface type
type MockIAMInterface struct {
	mock.Mock
}

type MockIAMInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIAMInterface) EXPECT() *MockIAMInterface_Expecter {
	return &MockIAMInterface_Expecter{mock: &_m.Mock}
}

// AssignRolesToUser provides a mock function with given fields: ctx, organizationIamIdentifier, userId, roles
func (_m *MockIAMInterface) AssignRolesToUser(ctx context.Context, organizationIamIdentifier string, userId string, roles []models.Role) error {
	ret := _m.Called(ctx, organizationIamIdentifier, userId, roles)

	if len(ret) == 0 {
		panic("no return value specified for AssignRolesToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, []models.Role) error); ok {
		r0 = rf(ctx, organizationIamIdentifier, userId, roles)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMInterface_AssignRolesToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignRolesToUser'
type MockIAMInterface_AssignRolesToUser_Call struct {
	*mock.Call
}

// AssignRolesToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationIamIdentifier string
//   - userId string
//   - roles []models.Role
func (_e *MockIAMInterface_Expecter) AssignRolesToUser(ctx interface{}, organizationIamIdentifier interface{}, userId interface{}, roles interface{}) *MockIAMInterface_AssignRolesToUser_Call {
	return &MockIAMInterface_AssignRolesToUser_Call{Call: _e.mock.On("AssignRolesToUser", ctx, organizationIamIdentifier, userId, roles)}
}

func (_c *MockIAMInterface_AssignRolesToUser_Call) Run(run func(ctx context.Context, organizationIamIdentifier string, userId string, roles []models.Role)) *MockIAMInterface_AssignRolesToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].([]models.Role))
	})
	return _c
}

func (_c *MockIAMInterface_AssignRolesToUser_Call) Return(_a0 error) *MockIAMInterface_AssignRolesToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMInterface_AssignRolesToUser_Call) RunAndReturn(run func(context.Context, string, string, []models.Role) error) *MockIAMInterface_AssignRolesToUser_Call {
	_c.Call.Return(run)
	return _c
}

// CreateUser provides a mock function with given fields: ctx, organizationIamIdentifier, newUser
func (_m *MockIAMInterface) CreateUser(ctx context.Context, organizationIamIdentifier string, newUser models.NewUser) (*models.User, error) {
	ret := _m.Called(ctx, organizationIamIdentifier, newUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NewUser) (*models.User, error)); ok {
		return rf(ctx, organizationIamIdentifier, newUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, models.NewUser) *models.User); ok {
		r0 = rf(ctx, organizationIamIdentifier, newUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, models.NewUser) error); ok {
		r1 = rf(ctx, organizationIamIdentifier, newUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMInterface_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockIAMInterface_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationIamIdentifier string
//   - newUser models.NewUser
func (_e *MockIAMInterface_Expecter) CreateUser(ctx interface{}, organizationIamIdentifier interface{}, newUser interface{}) *MockIAMInterface_CreateUser_Call {
	return &MockIAMInterface_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, organizationIamIdentifier, newUser)}
}

func (_c *MockIAMInterface_CreateUser_Call) Run(run func(ctx context.Context, organizationIamIdentifier string, newUser models.NewUser)) *MockIAMInterface_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(models.NewUser))
	})
	return _c
}

func (_c *MockIAMInterface_CreateUser_Call) Return(_a0 *models.User, _a1 error) *MockIAMInterface_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMInterface_CreateUser_Call) RunAndReturn(run func(context.Context, string, models.NewUser) (*models.User, error)) *MockIAMInterface_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: ctx, organizationIamIdentifier, userId
func (_m *MockIAMInterface) DeleteUser(ctx context.Context, organizationIamIdentifier string, userId string) error {
	ret := _m.Called(ctx, organizationIamIdentifier, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, organizationIamIdentifier, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMInterface_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockIAMInterface_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationIamIdentifier string
//   - userId string
func (_e *MockIAMInterface_Expecter) DeleteUser(ctx interface{}, organizationIamIdentifier interface{}, userId interface{}) *MockIAMInterface_DeleteUser_Call {
	return &MockIAMInterface_DeleteUser_Call{Call: _e.mock.On("DeleteUser", ctx, organizationIamIdentifier, userId)}
}

func (_c *MockIAMInterface_DeleteUser_Call) Run(run func(ctx context.Context, organizationIamIdentifier string, userId string)) *MockIAMInterface_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIAMInterface_DeleteUser_Call) Return(_a0 error) *MockIAMInterface_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMInterface_DeleteUser_Call) RunAndReturn(run func(context.Context, string, string) error) *MockIAMInterface_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoles provides a mock function with given fields: ctx
func (_m *MockIAMInterface) GetRoles(ctx context.Context) ([]models.Role, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetRoles")
	}

	var r0 []models.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]models.Role, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []models.Role); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMInterface_GetRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoles'
type MockIAMInterface_GetRoles_Call struct {
	*mock.Call
}

// GetRoles is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockIAMInterface_Expecter) GetRoles(ctx interface{}) *MockIAMInterface_GetRoles_Call {
	return &MockIAMInterface_GetRoles_Call{Call: _e.mock.On("GetRoles", ctx)}
}

func (_c *MockIAMInterface_GetRoles_Call) Run(run func(ctx context.Context)) *MockIAMInterface_GetRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockIAMInterface_GetRoles_Call) Return(_a0 []models.Role, _a1 error) *MockIAMInterface_GetRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMInterface_GetRoles_Call) RunAndReturn(run func(context.Context) ([]models.Role, error)) *MockIAMInterface_GetRoles_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: ctx, organizationIamIdentifier, userId
func (_m *MockIAMInterface) GetUserById(ctx context.Context, organizationIamIdentifier string, userId string) (*models.User, error) {
	ret := _m.Called(ctx, organizationIamIdentifier, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.User, error)); ok {
		return rf(ctx, organizationIamIdentifier, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = rf(ctx, organizationIamIdentifier, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, organizationIamIdentifier, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMInterface_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockIAMInterface_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationIamIdentifier string
//   - userId string
func (_e *MockIAMInterface_Expecter) GetUserById(ctx interface{}, organizationIamIdentifier interface{}, userId interface{}) *MockIAMInterface_GetUserById_Call {
	return &MockIAMInterface_GetUserById_Call{Call: _e.mock.On("GetUserById", ctx, organizationIamIdentifier, userId)}
}

func (_c *MockIAMInterface_GetUserById_Call) Run(run func(ctx context.Context, organizationIamIdentifier string, userId string)) *MockIAMInterface_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockIAMInterface_GetUserById_Call) Return(_a0 *models.User, _a1 error) *MockIAMInterface_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMInterface_GetUserById_Call) RunAndReturn(run func(context.Context, string, string) (*models.User, error)) *MockIAMInterface_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsers provides a mock function with given fields: ctx, organizationIamIdentifier
func (_m *MockIAMInterface) GetUsers(ctx context.Context, organizationIamIdentifier string) ([]models.User, error) {
	ret := _m.Called(ctx, organizationIamIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.User, error)); ok {
		return rf(ctx, organizationIamIdentifier)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.User); ok {
		r0 = rf(ctx, organizationIamIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, organizationIamIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIAMInterface_GetUsers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsers'
type MockIAMInterface_GetUsers_Call struct {
	*mock.Call
}

// GetUsers is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationIamIdentifier string
func (_e *MockIAMInterface_Expecter) GetUsers(ctx interface{}, organizationIamIdentifier interface{}) *MockIAMInterface_GetUsers_Call {
	return &MockIAMInterface_GetUsers_Call{Call: _e.mock.On("GetUsers", ctx, organizationIamIdentifier)}
}

func (_c *MockIAMInterface_GetUsers_Call) Run(run func(ctx context.Context, organizationIamIdentifier string)) *MockIAMInterface_GetUsers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockIAMInterface_GetUsers_Call) Return(_a0 []models.User, _a1 error) *MockIAMInterface_GetUsers_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockIAMInterface_GetUsers_Call) RunAndReturn(run func(context.Context, string) ([]models.User, error)) *MockIAMInterface_GetUsers_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, organizationIamIdentifier, userId, updateUser
func (_m *MockIAMInterface) UpdateUser(ctx context.Context, organizationIamIdentifier string, userId string, updateUser models.UpdateUser) error {
	ret := _m.Called(ctx, organizationIamIdentifier, userId, updateUser)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, models.UpdateUser) error); ok {
		r0 = rf(ctx, organizationIamIdentifier, userId, updateUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockIAMInterface_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockIAMInterface_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - organizationIamIdentifier string
//   - userId string
//   - updateUser models.UpdateUser
func (_e *MockIAMInterface_Expecter) UpdateUser(ctx interface{}, organizationIamIdentifier interface{}, userId interface{}, updateUser interface{}) *MockIAMInterface_UpdateUser_Call {
	return &MockIAMInterface_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, organizationIamIdentifier, userId, updateUser)}
}

func (_c *MockIAMInterface_UpdateUser_Call) Run(run func(ctx context.Context, organizationIamIdentifier string, userId string, updateUser models.UpdateUser)) *MockIAMInterface_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(models.UpdateUser))
	})
	return _c
}

func (_c *MockIAMInterface_UpdateUser_Call) Return(_a0 error) *MockIAMInterface_UpdateUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockIAMInterface_UpdateUser_Call) RunAndReturn(run func(context.Context, string, string, models.UpdateUser) error) *MockIAMInterface_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockIAMInterface creates a new instance of MockIAMInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockIAMInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockIAMInterface {
	mock := &MockIAMInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
